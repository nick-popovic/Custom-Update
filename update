#!/bin/bash


## this illustrates how to check the last
## return value of a command line arg:
## 0 ----------------> SUCCESS
## 1 (or non-zero) --> FAILURE
function DO_NOT_USE_THIS_FUNCTION(){
	command1
	if [ $? -ne 0 ]; then
		echo "command1 borked it"
	fi
}


function display_welcome(){
	cat /usr/local/bin/.update;
	echo "";
}

function run_apt(){
	echo "";
	echo "updating ...";
	sudo apt-get update;

	echo "";
	echo "upgrading ...";
	sudo apt-get full-upgrade;

	echo "";
	echo "cleaning ...";
	sudo apt-get autoclean;

	echo "";
        echo "removing ...";
        sudo apt-get autoremove;

	echo "";
        echo "cleaning ...";
        sudo apt-get autoclean;
}

function run_update(){
	### Check if OS is MAC OS - update with brew pkg man
	if [[ "$OSTYPE" == "darwin"* ]]; then
		echo "Running on macOS"

		echo "|--> Updating Brew ...";
		brew update;

		echo "|--> Updating Packages ...";
		brew upgrade;

		exit 0;
	else
		echo "Not running on macOS"
	fi

	### Check if OS is Linux and find the right pkg man to update ###
	if [[ "$OSTYPE" == "linux-gnu"* ]]; then
		if command -v apt >/dev/null 2>&1; then
			echo "Running Linux with apt installed"
			echo "|--> Updating Packages";
			run_apt;
			exit 0;
		else
			echo "Linux but apt is not installed"
		fi
	else
		echo "Not running on Linux"
	fi
}

### MAIN Code entry here ... ###
display_welcome;

echo -n "Do everything (update > upgrade > clean > remove > clean)? (*/N) "
read everything_opt

## Check user input (must be a 'N' to avoid doing everything)
if [ "$everything_opt" == "N" ] || [ "$everything_opt" == "n" ]; then
        echo "Opt-out of everything ..."
	exit 0;
else
	run_update;
fi
